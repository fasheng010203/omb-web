<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.onemile.bms.mapper.admin.AdminUserRoleMapper">
    <resultMap id="BaseResultMap" type="com.onemile.bms.entity.admin.AdminUserRole">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="user_id" property="userId" jdbcType="BIGINT"/>
        <result column="role_id" property="roleId" jdbcType="BIGINT"/>
        <result column="gmt_create" property="gmtCreate" jdbcType="TIMESTAMP"/>
        <result column="gmt_modified" property="gmtModified" jdbcType="TIMESTAMP"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, user_id, role_id, gmt_create, gmt_modified
  </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from admin_user_role
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from admin_user_role
    where id = #{id,jdbcType=BIGINT}
    </delete>
    <insert id="insert" parameterType="com.onemile.bms.entity.admin.AdminUserRole">
        insert into admin_user_role ( user_id, role_id,
        gmt_create, gmt_modified)
        values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{roleId,jdbcType=BIGINT},
        #{gmtCreate,jdbcType=TIMESTAMP}, #{gmtModified,jdbcType=TIMESTAMP});
        <selectKey resultType="long" keyProperty="id">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>
    <insert id="insertSelective" parameterType="com.onemile.bms.entity.admin.AdminUserRole">
        insert into admin_user_role
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="roleId != null">
                role_id,
            </if>
            <if test="gmtCreate != null">
                gmt_create,
            </if>
            <if test="gmtModified != null">
                gmt_modified,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=BIGINT},
            </if>
            <if test="roleId != null">
                #{roleId,jdbcType=BIGINT},
            </if>
            <if test="gmtCreate != null">
                #{gmtCreate,jdbcType=TIMESTAMP},
            </if>
            <if test="gmtModified != null">
                #{gmtModified,jdbcType=TIMESTAMP},
            </if>
        </trim>

        <selectKey resultType="long" keyProperty="id">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.onemile.bms.entity.admin.AdminUserRole">
        update admin_user_role
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=BIGINT},
            </if>
            <if test="roleId != null">
                role_id = #{roleId,jdbcType=BIGINT},
            </if>
            <if test="gmtCreate != null">
                gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
            </if>
            <if test="gmtModified != null">
                gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.onemile.bms.entity.admin.AdminUserRole">
    update admin_user_role
    set user_id = #{userId,jdbcType=BIGINT},
      role_id = #{roleId,jdbcType=BIGINT},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
    </update>

    <!-- 以上是工具自动生成-->

    <select id="selectUserRoles" parameterType="Long" resultType="Long">
     select role_id
	 from admin_user_role
	 where  user_id = #{userId}
    </select>

    <select id="selectUserResc" parameterType="Long" resultType="Long">
        select r.resource_id
        from admin_user_role p
        inner join admin_role_resource r on  p.role_id = r.role_id
        where p.user_id = #{userId}
   </select>

    <delete id="deleteByUserId" parameterType="Long">
       delete  from  admin_user_role where  user_id = #{userId}
     </delete>

    <insert id="batchInsert" parameterType="List">
        insert into admin_user_role (user_id, role_id,gmt_create, gmt_modified)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            ( #{item.userId,jdbcType=BIGINT}, #{item.roleId,jdbcType=INTEGER},
            #{item.gmtCreate,jdbcType=TIMESTAMP}, #{item.gmtModified,jdbcType=TIMESTAMP})
        </foreach>
    </insert>

    <select id="countByRoleId" parameterType="Long" resultType="Integer">
        select count(*) from  admin_user_role where role_id=#{roleId}
    </select>


</mapper>